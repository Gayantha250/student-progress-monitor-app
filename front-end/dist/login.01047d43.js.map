{"mappings":"CCME,AAAA,SAAU,CAAM,EAChB,aACA,IAAI,EAwDF,EAAO,YACP,EAAU,EAAO,WACjB,EAAa,EAAU,iBACvB,EAAa,EAAU,gBACvB,EAAc,EAAO,mBAGrB,EAAI,CAAC,EACL,EAAY,KAAK,EACjB,EAAU,uCA0HZ,SAAS,EAAM,CAAC,CAAE,CAAE,CAAE,CAAE,CAAE,CAAI,EAC5B,IAAI,EAAK,EAAE,CAAX,CAGA,GADI,IAAO,GAAW,CAAA,EAAK,EAAE,WAAA,CAAY,EAAzC,AAAA,EACI,AAAO,IAAP,GAAY,AAAO,IAAP,GAAY,AAAO,IAAP,GAAY,AAAO,IAAP,EACtC,MAAM,MAAM,GAGd,GAAI,EAAK,EACP,EACE,AAAO,IAAP,GAAa,CAAA,GAAQ,CAAC,CAAC,CAAE,CAAC,EAAC,AAAD,GAAO,AAAO,IAAP,GACjC,CAAA,AAAO,IAAP,GAAY,CAAE,CAAC,EAAE,EAAI,GACrB,AAAO,IAAP,GAAa,CAAA,CAAE,CAAC,EAAE,CAAG,GAAK,AAAU,IAAV,CAAE,CAAC,EAAE,EAAW,CAAA,GAAQ,CAAE,CAAC,EAAE,GAAK,CAAA,CAAQ,CAAC,EAGvE,EAAG,MAAA,CAAS,EAER,GAGF,EAAE,CAAA,CAAI,EAAE,CAAA,CAAI,EAAK,EACjB,CAAE,CAAC,EAAE,CAAG,GAIR,CAAE,CAAC,EAAE,CAAG,EAAE,CAAA,CAAI,OAEX,GAAI,EAAK,EAAG,MAAA,CAAQ,CAazB,GAVA,EACE,AAAO,IAAP,GAAY,CAAE,CAAC,EAAG,EAAI,GACtB,AAAO,IAAP,GAAa,CAAA,CAAE,CAAC,EAAG,CAAG,GAAK,AAAW,IAAX,CAAE,CAAC,EAAG,EAC9B,CAAA,GAAQ,CAAE,CAAC,EAAK,EAAE,GAAK,GAAa,AAAa,EAAb,CAAE,CAAC,EAAK,EAAE,AAAG,CAAA,GACpD,AAAO,IAAP,GAAa,CAAA,GAAQ,CAAC,CAAC,CAAE,CAAC,EAAC,AAAD,EAG5B,EAAG,MAAA,CAAS,EAGR,EAGF,CAAA,KAAO,EAAE,CAAE,CAAC,EAAE,EAAG,CAAG,GAElB,GADA,CAAE,CAAC,EAAG,CAAG,EACL,AAAO,IAAP,EAAU,CACZ,EAAE,EAAE,CAAJ,CACA,EAAG,OAAA,CAAQ,GACX,KACF,CACF,CAIF,IAAK,EAAK,EAAG,MAAA,CAAQ,CAAC,CAAE,CAAC,EAAE,EAAG,EAAG,EAAG,GAApC,EACF,CAEA,OAAO,CACT,CAOA,SAAS,EAAU,CAAC,CAAE,CAAa,CAAE,CAAS,EAC5C,IAAI,EAAI,EAAE,CAAA,CACR,EAAI,EAAE,CAAA,CAAE,IAAA,CAAK,IACb,EAAI,EAAE,MAFR,CAKA,GAAI,EACF,EAAI,EAAE,MAAA,CAAO,GAAM,CAAA,EAAI,EAAI,IAAM,EAAE,KAAA,CAAM,GAAK,EAAA,EAAO,CAAA,EAAI,EAAI,IAAM,IAAA,EAAQ,OAGtE,GAAI,EAAI,EAAG,CAChB,KAAO,EAAE,GAAI,EAAI,IAAM,EACvB,EAAI,KAAO,CACb,MAAO,GAAI,EAAI,GACb,GAAI,EAAE,EAAI,EACR,IAAK,GAAK,EAAG,KAAM,GAAK,SACf,EAAI,GACb,CAAA,EAAI,EAAE,KAAA,CAAM,EAAG,GAAK,IAAM,EAAE,KAAA,CAAM,EAD7B,OAGE,EAAI,GACb,CAAA,EAAI,EAAE,MAAA,CAAO,GAAK,IAAM,EAAE,KAAA,CAAM,EADlC,EAIA,OAAO,EAAE,CAAA,CAAI,GAAK,EAAY,IAAM,EAAI,CAC1C,CASA,EAAE,GAAA,CAAM,WACN,IAAI,EAAI,IAAI,IAAI,CAAC,WAAA,CAAY,IAAI,EAEjC,OADA,EAAE,CAAA,CAAI,EACC,CACT,EAQA,EAAE,GAAA,CAAM,SAAU,CAAC,EACjB,IAAI,EAEF,EAAK,AADD,IAAI,CACD,CAAA,CACP,EAAK,AAAC,CAAA,EAAI,IAAI,AAFV,IAAI,CAEQ,WAAA,CAAY,EAAA,EAAI,CAAA,CAChC,EAAI,AAHA,IAAI,CAGF,CAAA,CACN,EAAI,EAAE,CAAA,CACN,EAAI,AALA,IAAI,CAKF,CAAA,CACN,EAAI,EAAE,CAPR,CAUA,GAAI,CAAC,CAAE,CAAC,EAAE,EAAI,CAAC,CAAE,CAAC,EAAE,CAAE,OAAO,AAAC,CAAE,CAAC,EAAE,CAAqB,EAAlB,AAAC,CAAE,CAAC,EAAE,CAAO,CAAC,EAAL,EAG/C,GAAI,GAAK,EAAG,OAAO,EAKnB,GAHA,EAAQ,EAAI,EAGR,GAAK,EAAG,OAAO,EAAI,EAAI,EAAQ,EAAI,GAKvC,IAAK,EAAI,GAHT,EAAI,AAAC,CAAA,EAAI,EAAG,MAAK,AAAL,EAAW,CAAA,EAAI,EAAG,MAAK,AAAL,EAAU,EAAI,EAG/B,EAAE,EAAI,GACjB,GAAI,CAAE,CAAC,EAAE,EAAI,CAAE,CAAC,EAAE,CAAE,OAAO,CAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAG,EAAQ,EAAI,GAIzD,OAAO,GAAK,EAAI,EAAI,EAAI,EAAI,EAAQ,EAAI,EAC1C,EAOA,EAAE,GAAA,CAAM,SAAU,CAAC,EACjB,IACE,EAAM,AADA,IAAI,CACF,WAAA,CACR,EAAI,AAFE,IAAI,CAEJ,CAAA,CACN,EAAI,AAAC,CAAA,EAAI,IAAI,EAAI,EAAA,EAAI,CAAA,CACrB,EAAI,AAJE,IAAI,CAIJ,CAAA,EAAK,EAAE,CAAA,CAAI,EAAI,GACrB,EAAK,EAAI,EALX,CAOA,GAAI,IAAO,CAAC,CAAC,GAAM,EAAK,GAAK,EA7TpB,IA8TP,MAAM,MAAM,GAId,GAAI,CAAC,CAAC,CAAC,EAAE,CACP,MAAM,MAAM,GAId,GAAI,CAAC,CAAC,CAAC,EAAE,CAGP,OAFA,EAAE,CAAA,CAAI,EACN,EAAE,CAAA,CAAI,CAAC,EAAE,CAAA,CAAI,EAAE,CACR,EAGT,IAAI,EAAI,EAAI,EAAG,EAAK,EAClB,EAAK,EAAE,KAAA,GACP,EAAK,EAAK,EAAE,MAAA,CACZ,EAAK,EAAE,MAAA,CACP,EAAI,EAAE,KAAA,CAAM,EAAG,GACf,EAAK,EAAE,MAAA,CACP,EAAI,EACJ,EAAK,EAAE,CAAA,CAAI,EAAE,CACb,EAAK,EACL,EAAI,EAAM,CAAA,EAAE,CAAA,CAAI,AAhCV,IAAI,CAgCQ,CAAA,CAAI,EAAE,CAAA,AAAA,EAAK,EAS/B,IAPA,EAAE,CAAA,CAAI,EACN,EAAI,EAAI,EAAI,EAAI,EAGhB,EAAG,OAAA,CAAQ,GAGJ,IAAO,GAAK,EAAE,IAAA,CAAK,GAE1B,EAAG,CAGD,IAAK,EAAI,EAAG,EAAI,GAAI,IAAK,CAGvB,GAAI,GAAO,CAAA,EAAK,EAAE,MAAK,AAAL,EAChB,EAAM,EAAK,EAAK,EAAI,QAEpB,IAAK,EAAK,GAAI,EAAM,EAAG,EAAE,EAAK,GAC5B,GAAI,CAAC,CAAC,EAAG,EAAI,CAAC,CAAC,EAAG,CAAE,CAClB,EAAM,CAAC,CAAC,EAAG,CAAG,CAAC,CAAC,EAAG,CAAG,EAAI,GAC1B,KACF,CAKJ,GAAI,EAAM,EAAG,CAIX,IAAK,EAAK,GAAM,EAAK,EAAI,EAAI,GAAK,CAChC,GAAI,CAAC,CAAC,EAAE,EAAG,CAAG,CAAE,CAAC,EAAG,CAAE,CAEpB,IADA,EAAK,EACE,GAAM,CAAC,CAAC,CAAC,EAAE,EAAG,EAAG,CAAC,CAAC,EAAG,CAAG,CAChC,GAAE,CAAC,CAAC,EAAG,CACP,CAAC,CAAC,EAAG,EAAI,EACX,CACA,CAAC,CAAC,EAAG,EAAI,CAAE,CAAC,EAAG,AACjB,CAEA,KAAO,CAAC,CAAC,CAAC,EAAE,EAAG,EAAE,KAAjB,EACF,MACE,KAEJ,CAGA,CAAE,CAAC,IAAK,CAAG,EAAM,EAAI,EAAE,EAGnB,CAAC,CAAC,EAAE,EAAI,EAAK,CAAC,CAAC,EAAG,CAAG,CAAC,CAAC,EAAG,EAAI,EAC7B,EAAI,CAAC,CAAC,CAAC,EAAG,CAAC,AAElB,OAAS,AAAC,CAAA,IAAO,GAAM,CAAC,CAAC,EAAE,GAAK,CAAA,GAAc,IAAK,AAcnD,MAXI,CAAC,CAAE,CAAC,EAAE,EAAI,AAAM,GAAN,IAGZ,EAAG,KAAH,GACA,EAAE,CAAF,GACA,KAIE,EAAK,GAAG,EAAM,EAAG,EAAG,EAAI,EAAA,CAAI,CAAC,CAAC,EAAE,GAAK,GAElC,CACT,EAMA,EAAE,EAAA,CAAK,SAAU,CAAC,EAChB,OAAO,AAAgB,IAAhB,IAAI,CAAC,GAAA,CAAI,EAClB,EAOA,EAAE,EAAA,CAAK,SAAU,CAAC,EAChB,OAAO,IAAI,CAAC,GAAA,CAAI,GAAK,CACvB,EAOA,EAAE,GAAA,CAAM,SAAU,CAAC,EACjB,OAAO,IAAI,CAAC,GAAA,CAAI,GAAK,EACvB,EAMA,EAAE,EAAA,CAAK,SAAU,CAAC,EAChB,OAAO,AAAc,EAAd,IAAI,CAAC,GAAA,CAAI,EAClB,EAOA,EAAE,GAAA,CAAM,SAAU,CAAC,EACjB,OAAO,AAAc,EAAd,IAAI,CAAC,GAAA,CAAI,EAClB,EAMA,EAAE,KAAA,CAAQ,EAAE,GAAA,CAAM,SAAU,CAAC,EAC3B,IAAI,EAAG,EAAG,EAAG,EAEX,EAAM,AADF,IAAI,CACA,WAAA,CACR,EAAI,AAFA,IAAI,CAEF,CAAA,CACN,EAAK,AAAA,CAAA,EAAI,IAAI,EAAI,EAAA,EAAI,CAJvB,CAOA,GAAI,GAAK,EAEP,OADA,EAAE,CAAA,CAAI,CAAC,EACA,AARH,IAAI,CAQC,IAAA,CAAK,GAGhB,IAAI,EAAK,AAXH,IAAI,CAWC,CAAA,CAAE,KAAA,GACX,EAAK,AAZD,IAAI,CAYD,CAAA,CACP,EAAK,EAAE,CAAA,CACP,EAAK,EAAE,CAHT,CAMA,GAAI,CAAC,CAAE,CAAC,EAAE,EAAI,CAAC,CAAE,CAAC,EAAE,CAQlB,OAPI,CAAE,CAAC,EAAE,CACP,EAAE,CAAA,CAAI,CAAC,EACE,CAAE,CAAC,EAAE,CACd,EAAI,IAAI,EArBN,IAAI,EAuBN,EAAE,CAAA,CAAI,EAED,EAIT,GAAI,EAAI,EAAK,EAAI,CAWf,IATI,CAAA,EAAO,EAAI,CAAA,GACb,EAAI,CAAC,EACL,EAAI,IAEJ,EAAK,EACL,EAAI,GAGN,EAAE,OAAF,GACK,EAAI,EAAG,KAAM,EAAE,IAAA,CAAK,GACzB,EAAE,OAAF,EACF,MAKE,IAFA,EAAI,AAAC,CAAA,AAAC,CAAA,EAAO,EAAG,MAAA,CAAS,EAAG,MAAK,AAAL,EAAU,EAAK,CAAA,EAAI,MAA/C,CAEK,EAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GAAI,CAAE,CAAC,EAAE,EAAI,CAAE,CAAC,EAAE,CAAE,CAClB,EAAO,CAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CACpB,KACF,CAgBJ,GAXI,IACF,EAAI,EACJ,EAAK,EACL,EAAK,EACL,EAAE,CAAA,CAAI,CAAC,EAAE,CAAT,EAOG,AAAA,CAAA,EAAK,AAAA,CAAA,EAAI,EAAG,MAAK,AAAL,EAAW,CAAA,EAAI,EAAG,MAAK,AAAL,CAAK,EAAM,EAAG,KAAO,KAAM,CAAE,CAAC,IAAI,CAAG,EAGxE,IAAK,EAAI,EAAG,EAAI,GAAI,CAClB,GAAI,CAAE,CAAC,EAAE,EAAE,CAAG,CAAE,CAAC,EAAE,CAAE,CACnB,IAAK,EAAI,EAAG,GAAK,CAAC,CAAE,CAAC,EAAE,EAAE,EAAG,CAAE,CAAC,EAAE,CAAG,CACpC,GAAE,CAAE,CAAC,EAAE,CACP,CAAE,CAAC,EAAE,EAAI,EACX,CAEA,CAAE,CAAC,EAAE,EAAI,CAAE,CAAC,EAAE,AAChB,CAGA,KAAO,AAAY,IAAZ,CAAE,CAAC,EAAE,EAAE,EAAS,EAAG,GAA1B,GAGA,KAAO,AAAU,IAAV,CAAE,CAAC,EAAE,EACV,EAAG,KAAH,GACA,EAAE,EAeJ,OAZK,CAAE,CAAC,EAAE,GAGR,EAAE,CAAA,CAAI,EAGN,EAAK,CAAC,EAAK,EAAE,EAGf,EAAE,CAAA,CAAI,EACN,EAAE,CAAA,CAAI,EAEC,CACT,EAMA,EAAE,GAAA,CAAM,SAAU,CAAC,EACjB,IAAI,EACF,EAAI,IAAI,CACR,EAAM,EAAE,WAAA,CACR,EAAI,EAAE,CAAA,CACN,EAAK,AAAA,CAAA,EAAI,IAAI,EAAI,EAAA,EAAI,CAJvB,CAMA,GAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CACT,MAAM,MAAM,SAQd,CALA,EAAE,CAAA,CAAI,EAAE,CAAA,CAAI,EACZ,EAAO,AAAY,GAAZ,EAAE,GAAA,CAAI,GACb,EAAE,CAAA,CAAI,EACN,EAAE,CAAA,CAAI,EAEF,GAAa,IAAI,EAAI,IAEzB,EAAI,EAAI,EAAR,CACA,EAAI,EAAI,EAAR,CACA,EAAI,EAAA,CAAK,EAAI,EAAA,CAAK,EAClB,EAAI,EAAE,GAAA,CAAI,GACV,EAAI,EAAA,CAAK,EACT,EAAI,EAAA,CAAK,EAEF,IAAI,CAAC,KAAA,CAAM,EAAE,KAAA,CAAM,IAC5B,EAMA,EAAE,GAAA,CAAM,WACN,IAAI,EAAI,IAAI,IAAI,CAAC,WAAA,CAAY,IAAI,EAEjC,OADA,EAAE,CAAA,CAAI,CAAC,EAAE,CAAT,CACO,CACT,EAMA,EAAE,IAAA,CAAO,EAAE,GAAA,CAAM,SAAU,CAAC,EAC1B,IAAI,EAAG,EAAG,EAER,EAAM,AADF,IAAI,CACA,WAFV,CAOA,GAHA,EAAI,IAAI,EAAI,GAGR,AANE,IAAI,CAMJ,CAAA,EAAK,EAAE,CAAA,CAEX,OADA,EAAE,CAAA,CAAI,CAAC,EAAE,CAAT,CACO,AARH,IAAI,CAQC,KAAA,CAAM,GAGjB,IAAI,EAAK,AAXH,IAAI,CAWC,CAAA,CACT,EAAK,AAZD,IAAI,CAYD,CAAA,CACP,EAAK,EAAE,CAAA,CACP,EAAK,EAAE,CAHT,CAMA,GAAI,CAAC,CAAE,CAAC,EAAE,EAAI,CAAC,CAAE,CAAC,EAAE,CAQlB,OAPK,CAAE,CAAC,EAAE,GACJ,CAAE,CAAC,EAAE,CACP,EAAI,IAAI,EApBR,IAAI,EAsBJ,EAAE,CAAA,CAAI,AAtBN,IAAI,CAsBI,CAAR,EAGG,EAOT,GAJA,EAAK,EAAG,KAAR,GAII,EAAI,EAAK,EAAI,CAUf,IATI,EAAI,GACN,EAAK,EACL,EAAI,IAEJ,EAAI,CAAC,EACL,EAAI,GAGN,EAAE,OAAF,GACO,KAAM,EAAE,IAAA,CAAK,GACpB,EAAE,OAAF,EACF,CAYA,IATI,EAAG,MAAA,CAAS,EAAG,MAAA,CAAS,IAC1B,EAAI,EACJ,EAAK,EACL,EAAK,GAGP,EAAI,EAAG,MAAP,CAGK,EAAI,EAAG,EAAG,CAAE,CAAC,EAAE,EAAI,GAAI,EAAK,AAAA,CAAA,CAAE,CAAC,EAAE,EAAE,CAAG,CAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAG,CAAA,EAAK,GAAK,EAUrE,IANI,IACF,EAAG,OAAA,CAAQ,GACX,EAAE,GAIC,EAAI,EAAG,MAAA,CAAQ,AAAY,IAAZ,CAAE,CAAC,EAAE,EAAE,EAAS,EAAG,GAAvC,GAKA,OAHA,EAAE,CAAA,CAAI,EACN,EAAE,CAAA,CAAI,EAEC,CACT,EAUA,EAAE,GAAA,CAAM,SAAU,CAAC,EACjB,IAAI,EAAI,IAAI,CACV,EAAM,IAAI,EAAE,WAAA,CAAY,KACxB,EAAI,EACJ,EAAQ,EAAI,EAEd,GAAI,IAAM,CAAC,CAAC,GAAK,EAAI,MAAc,EA7rBvB,IA8rBV,MAAM,MAAM,EAAU,YAKxB,IAFI,GAAO,CAAA,EAAI,CAAC,CAAA,EAGN,EAAJ,GAAO,CAAA,EAAI,EAAE,KAAA,CAAM,EAAvB,EACA,IAAM,GAEN,EAAI,EAAE,KAAA,CAAM,GAGd,OAAO,EAAQ,EAAI,GAAA,CAAI,GAAK,CAC9B,EAUA,EAAE,IAAA,CAAO,SAAU,CAAE,CAAE,CAAE,EACvB,GAAI,IAAO,CAAC,CAAC,GAAM,EAAK,GAAK,EAztBpB,IA0tBP,MAAM,MAAM,EAAU,aAExB,OAAO,EAAM,IAAI,IAAI,CAAC,WAAA,CAAY,IAAI,EAAG,EAAI,EAC/C,EAYA,EAAE,KAAA,CAAQ,SAAU,CAAE,CAAE,CAAE,EACxB,GAAI,IAAO,EAAW,EAAK,OACtB,GAAI,IAAO,CAAC,CAAC,GAAM,EAAK,MAAW,EA3uB/B,IA4uBP,MAAM,MAAM,GAEd,OAAO,EAAM,IAAI,IAAI,CAAC,WAAA,CAAY,IAAI,EAAG,EAAK,IAAI,CAAC,CAAA,CAAI,EAAG,EAC5D,EAOA,EAAE,IAAA,CAAO,WACP,IAAI,EAAG,EAAG,EAER,EAAM,AADF,IAAI,CACA,WAAA,CACR,EAAI,AAFA,IAAI,CAEF,CAAA,CACN,EAAI,AAHA,IAAI,CAGF,CAAA,CACN,EAAO,IAAI,EAAI,OAGjB,GAAI,CAAC,AAPC,IAAI,CAOH,CAAC,CAAC,EAAE,CAAE,OAAO,IAAI,EAPlB,IAAI,EAUV,GAAI,EAAI,EACN,MAAM,MAAM,EAAO,iBAQjB,AAAM,CAAA,IAJV,CAAA,EAAI,KAAK,IAAA,CAAK,AAfR,IAAI,CAeQ,GAAlB,GAIe,IAAM,EAAI,GAEjB,AADN,CAAA,EAAI,AApBA,IAAI,CAoBF,CAAA,CAAE,IAAA,CAAK,GAAb,EACQ,MAAA,CAAS,EAAI,GAAI,CAAA,GAAK,GAA9B,EACA,EAAI,KAAK,IAAA,CAAK,GACd,EAAK,AAAC,CAAA,AAAA,CAAA,EAAI,CAAA,EAAK,EAAI,CAAA,EAAM,CAAA,EAAI,GAAK,AAAI,EAAJ,CAAI,EACtC,EAAI,IAAI,EAAK,AAAA,CAAA,GAAK,EAAI,EAAI,KAAQ,AAAA,CAAA,EAAI,EAAE,aAAA,EAAA,EAAiB,KAAA,CAAM,EAAG,EAAE,OAAA,CAAQ,KAAO,EAAA,EAAM,IAEzF,EAAI,IAAI,EAAI,EAAI,IAGlB,EAAI,EAAE,CAAA,CAAK,CAAA,EAAI,EAAA,EAAM,CAAA,EAGrB,GACE,EAAI,EACJ,EAAI,EAAK,KAAA,CAAM,EAAE,IAAA,CAAK,AAlClB,IAAI,CAkCgB,GAAA,CAAI,WACrB,EAAE,CAAA,CAAE,KAAA,CAAM,EAAG,GAAG,IAAA,CAAK,MAAQ,EAAE,CAAA,CAAE,KAAA,CAAM,EAAG,GAAG,IAAA,CAAK,IAAK,AAEhE,OAAO,EAAM,EAAG,AAAC,CAAA,EAAI,EAAA,EAAM,CAAA,EAAK,EAAE,CAAA,CAAI,EAAG,EAAI,EAA7C,CACF,EAMA,EAAE,KAAA,CAAQ,EAAE,GAAA,CAAM,SAAU,CAAC,EAC3B,IAAI,EAEF,EAAM,AADF,IAAI,CACA,WAAA,CACR,EAAK,AAFD,IAAI,CAED,CAAA,CACP,EAAK,AAAC,CAAA,EAAI,IAAI,EAAI,EAAA,EAAI,CAAA,CACtB,EAAI,EAAG,MAAA,CACP,EAAI,EAAG,MAAA,CACP,EAAI,AANA,IAAI,CAMF,CAAA,CACN,EAAI,EAAE,CARR,CAcA,GAHA,EAAE,CAAA,CAAI,AAVA,IAAI,CAUF,CAAA,EAAK,EAAE,CAAA,CAAI,EAAI,GAGnB,CAAC,CAAE,CAAC,EAAE,EAAI,CAAC,CAAE,CAAC,EAAE,CAElB,OADA,EAAE,CAAA,CAAI,CAAC,EAAE,CAAA,CAAI,EAAE,CACR,EAiBT,IAbA,EAAE,CAAA,CAAI,EAAI,EAGN,EAAI,IACN,EAAI,EACJ,EAAK,EACL,EAAK,EACL,EAAI,EACJ,EAAI,EACJ,EAAI,GAID,EAAI,AAAI,MAAM,EAAI,EAAI,GAAI,KAAM,CAAC,CAAC,EAAE,CAAG,EAK5C,IAAK,EAAI,EAAG,KAAM,CAIhB,IAHA,EAAI,EAGC,EAAI,EAAI,EAAG,EAAI,GAGlB,EAAI,CAAC,CAAC,EAAE,CAAG,CAAE,CAAC,EAAE,CAAG,CAAE,CAAC,EAAI,EAAI,EAAE,CAAG,EACnC,CAAC,CAAC,IAAI,CAAG,EAAI,GAGb,EAAI,EAAI,GAAK,CAGf,CAAA,CAAC,CAAC,EAAE,CAAG,CACT,CAOA,IAJI,EAAG,EAAE,EAAE,CAAX,CACK,EAAE,KAAF,GAGA,EAAI,EAAE,MAAA,CAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAG,EAAE,GAA/B,GAGA,OAFA,EAAE,CAAA,CAAI,EAEC,CACT,EAUA,EAAE,aAAA,CAAgB,SAAU,CAAE,CAAE,CAAE,EAChC,IAAI,EAAI,IAAI,CACV,EAAI,EAAE,CAAC,CAAC,EAAE,CAEZ,GAAI,IAAO,EAAW,CACpB,GAAI,IAAO,CAAC,CAAC,GAAM,EAAK,GAAK,EAp3BtB,IAq3BL,MAAM,MAAM,GAGd,IADA,EAAI,EAAM,IAAI,EAAE,WAAA,CAAY,GAAI,EAAE,EAAI,GAC/B,EAAE,CAAA,CAAE,MAAA,CAAS,GAAK,EAAE,CAAA,CAAE,IAAA,CAAK,EACpC,CAEA,OAAO,EAAU,EAAG,CAAA,EAAM,CAAC,CAAC,EAC9B,EAaA,EAAE,OAAA,CAAU,SAAU,CAAE,CAAE,CAAE,EAC1B,IAAI,EAAI,IAAI,CACV,EAAI,EAAE,CAAC,CAAC,EAAE,CAEZ,GAAI,IAAO,EAAW,CACpB,GAAI,IAAO,CAAC,CAAC,GAAM,EAAK,GAAK,EA94BtB,IA+4BL,MAAM,MAAM,GAKd,IAHA,EAAI,EAAM,IAAI,EAAE,WAAA,CAAY,GAAI,EAAK,EAAE,CAAA,CAAI,EAAG,GAGzC,EAAK,EAAK,EAAE,CAAA,CAAI,EAAG,EAAE,CAAA,CAAE,MAAA,CAAS,GAAK,EAAE,CAAA,CAAE,IAAA,CAAK,EACrD,CAEA,OAAO,EAAU,EAAG,CAAA,EAAO,CAAC,CAAC,EAC/B,EASA,EAAE,MAAA,CAAS,EAAE,QAAA,CAAW,WACtB,IACE,EAAM,AADA,IAAI,CACF,WADV,CAEA,OAAO,EAFC,IAAI,CAEQ,AAFZ,IAAI,CAEU,CAAA,EAAK,EAAI,EAAA,EAAM,AAF7B,IAAI,CAE2B,CAAA,EAAK,EAAI,EAAA,CAAI,CAAC,CAAC,AAF9C,IAAI,CAE4C,CAAC,CAAC,EAAE,CAC9D,EAMA,EAAE,QAAA,CAAW,WACX,IAAI,EAAI,OAAO,EAAU,IAAI,CAAE,CAAA,EAAM,CAAA,IACrC,GAAI,AAA4B,CAAA,IAA5B,IAAI,CAAC,WAAA,CAAY,MAAA,EAAmB,CAAC,IAAI,CAAC,EAAA,CAAG,EAAE,QAAA,IACjD,MAAM,MAAM,EAAO,wBAErB,OAAO,CACT,EAYA,EAAE,WAAA,CAAc,SAAU,CAAE,CAAE,CAAE,EAC9B,IAAI,EAAI,IAAI,CACV,EAAM,EAAE,WAAA,CACR,EAAI,EAAE,CAAC,CAAC,EAAE,CAEZ,GAAI,IAAO,EAAW,CACpB,GAAI,IAAO,CAAC,CAAC,GAAM,EAAK,GAAK,EAn8BtB,IAo8BL,MAAM,MAAM,EAAU,aAGxB,IADA,EAAI,EAAM,IAAI,EAAI,GAAI,EAAI,GACnB,EAAE,CAAA,CAAE,MAAA,CAAS,GAAK,EAAE,CAAA,CAAE,IAAA,CAAK,EACpC,CAEA,OAAO,EAAU,EAAG,GAAM,EAAE,CAAA,EAAK,EAAE,CAAA,EAAK,EAAI,EAAA,EAAM,EAAE,CAAA,EAAK,EAAI,EAAA,CAAI,CAAC,CAAC,EACrE,EASA,EAAE,OAAA,CAAU,WACV,IACE,EAAM,AADA,IAAI,CACF,WADV,CAEA,GAAI,AAAe,CAAA,IAAf,EAAI,MAAA,CACN,MAAM,MAAM,EAAO,sBAErB,OAAO,EALC,IAAI,CAKQ,AALZ,IAAI,CAKU,CAAA,EAAK,EAAI,EAAA,EAAM,AAL7B,IAAI,CAK2B,CAAA,EAAK,EAAI,EAAA,CAAI,CAAA,EACtD,EAQA,AAFA,CAAA,EAAM,AAn7BN,SAAS,IAQP,SAAS,EAAI,CAAC,EAIZ,GAAI,CAAE,CAAA,AAHE,IAAI,YAGO,CAAA,EAAM,OAAO,IAAM,EAAY,IAAU,IAAI,EAAI,GAGpE,GAAI,aAAa,EACf,AAPM,IAAI,CAOR,CAAA,CAAI,EAAE,CAAR,CACA,AARM,IAAI,CAQR,CAAA,CAAI,EAAE,CAAR,CACA,AATM,IAAI,CASR,CAAA,CAAI,EAAE,CAAA,CAAE,KAAV,OACK,CACL,GAAI,AAAa,UAAb,OAAO,EAAgB,CACzB,GAAI,AAAe,CAAA,IAAf,EAAI,MAAA,EAAmB,AAAa,UAAb,OAAO,EAChC,MAAM,UAAU,EAAU,SAI5B,EAAI,AAAM,IAAN,GAAW,EAAI,EAAI,EAAI,KAAO,OAAO,EAC3C,CAEA,AA6BN,CAAA,SAAe,CAAC,CAAE,CAAC,EACjB,IAAI,EAAG,EAAG,EAEV,GAAI,CAAC,EAAQ,IAAA,CAAK,GAChB,MAAM,MAAM,EAAU,UAyBxB,IArBA,EAAE,CAAA,CAAI,AAAe,KAAf,EAAE,MAAA,CAAO,GAAa,CAAA,EAAI,EAAE,KAAA,CAAM,GAAI,EAAA,EAAM,EAG7C,CAAA,EAAI,EAAE,OAAA,CAAQ,IAAA,EAAQ,IAAI,CAAA,EAAI,EAAE,OAAA,CAAQ,IAAK,GAAlD,EAGK,AAAA,CAAA,EAAI,EAAE,MAAA,CAAO,KAAA,EAAS,GAGrB,EAAI,GAAG,CAAA,EAAI,CAAA,EACf,GAAK,CAAC,EAAE,KAAA,CAAM,EAAI,GAClB,EAAI,EAAE,SAAA,CAAU,EAAG,IACV,EAAI,GAGb,CAAA,EAAI,EAAE,MAAN,AAAA,EAGF,EAAK,EAAE,MAAP,CAGK,EAAI,EAAG,EAAI,GAAM,AAAe,KAAf,EAAE,MAAA,CAAO,IAAY,EAAE,EAE7C,GAAI,GAAK,EAGP,EAAE,CAAA,CAAI,CAAC,EAAE,CAAA,CAAI,EAAE,KACV,CAGL,KAAO,EAAK,GAAK,AAAkB,KAAlB,EAAE,MAAA,CAAO,EAAE,KAK5B,IAJA,EAAE,CAAA,CAAI,EAAI,EAAI,EACd,EAAE,CAAA,CAAI,EAAE,CAGH,EAAI,EAAG,GAAK,GAAK,EAAE,CAAC,CAAC,IAAI,CAAG,CAAC,EAAE,MAAA,CAAO,IAC7C,CAGF,CAAA,EAhGY,IAAI,CAoBD,EACX,CAIA,AAzBQ,IAAI,CAyBV,WAAA,CAAc,CAClB,CAaA,OAXA,EAAI,SAAA,CAAY,EAChB,EAAI,EAAA,CAjGC,GAkGL,EAAI,EAAA,CAxFC,EAyFL,EAAI,EAAA,CA5EC,GA6EL,EAAI,EAAA,CAtEC,GAuEL,EAAI,MAAA,CAhEK,CAAA,EAiET,EAAI,SAAA,CAAY,EAChB,EAAI,WAAA,CAAc,EAClB,EAAI,aAAA,CAAgB,EACpB,EAAI,OAAA,CAAU,EAEP,CACT,GAk4BA,EAEI,OAAU,CAAG,EAAI,GAAA,CAAM,EAGvB,AAAkB,YAAlB,OAAO,QAAyB,OAAO,GAAA,CACzC,OAAO,WAAc,OAAO,CAAK,GAGxB,AAAkB,aAAlB,OAAO,QAA0B,OAAO,OAAA,CACjD,OAAO,OAAA,CAAU,EAIjB,EAAO,GAAA,CAAM,CAEjB,EAAG,IAAI","sources":["<anon>","node_modules/big.js/big.js"],"sourcesContent":["(function(GLOBAL) {\n    \"use strict\";\n    var Big, /************************************** EDITABLE DEFAULTS *****************************************/ // The default values below must be integers within the stated ranges.\n    /*\n     * The maximum number of decimal places (DP) of the results of operations involving division:\n     * div and sqrt, and pow with negative exponents.\n     */ DP = 20, /*\n     * The rounding mode (RM) used when rounding to the above decimal places.\n     *\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n     *  3  Away from zero.                                  (ROUND_UP)\n     */ RM = 1, // The maximum value of DP and Big.DP.\n    MAX_DP = 1E6, // The maximum magnitude of the exponent argument to the pow method.\n    MAX_POWER = 1E6, /*\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\n     * (JavaScript numbers: -7)\n     * -1000000 is the minimum recommended exponent value of a Big.\n     */ NE = -7, /*\n     * The positive exponent (PE) at and above which toString returns exponential notation.\n     * (JavaScript numbers: 21)\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n     */ PE = 21, /*\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n     * primitive number without a loss of precision.\n     */ STRICT = false, /**************************************************************************************************/ // Error messages.\n    NAME = \"[big.js] \", INVALID = NAME + \"Invalid \", INVALID_DP = INVALID + \"decimal places\", INVALID_RM = INVALID + \"rounding mode\", DIV_BY_ZERO = NAME + \"Division by zero\", // The shared prototype object.\n    P = {}, UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n    /*\n   * Create and return a Big constructor.\n   */ function _Big_() {\n        /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */ function Big(n) {\n            var x = this;\n            // Enable constructor usage without new.\n            if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\n            // Duplicate.\n            if (n instanceof Big) {\n                x.s = n.s;\n                x.e = n.e;\n                x.c = n.c.slice();\n            } else {\n                if (typeof n !== \"string\") {\n                    if (Big.strict === true && typeof n !== \"bigint\") throw TypeError(INVALID + \"value\");\n                    // Minus zero?\n                    n = n === 0 && 1 / n < 0 ? \"-0\" : String(n);\n                }\n                parse(x, n);\n            }\n            // Retain a reference to this Big constructor.\n            // Shadow Big.prototype.constructor which points to Object.\n            x.constructor = Big;\n        }\n        Big.prototype = P;\n        Big.DP = DP;\n        Big.RM = RM;\n        Big.NE = NE;\n        Big.PE = PE;\n        Big.strict = STRICT;\n        Big.roundDown = 0;\n        Big.roundHalfUp = 1;\n        Big.roundHalfEven = 2;\n        Big.roundUp = 3;\n        return Big;\n    }\n    /*\n   * Parse the number or string value passed to a Big constructor.\n   *\n   * x {Big} A Big number instance.\n   * n {number|string} A numeric value.\n   */ function parse(x, n) {\n        var e, i, nl;\n        if (!NUMERIC.test(n)) throw Error(INVALID + \"number\");\n        // Determine sign.\n        x.s = n.charAt(0) == \"-\" ? (n = n.slice(1), -1) : 1;\n        // Decimal point?\n        if ((e = n.indexOf(\".\")) > -1) n = n.replace(\".\", \"\");\n        // Exponential form?\n        if ((i = n.search(/e/i)) > 0) {\n            // Determine exponent.\n            if (e < 0) e = i;\n            e += +n.slice(i + 1);\n            n = n.substring(0, i);\n        } else if (e < 0) // Integer.\n        e = n.length;\n        nl = n.length;\n        // Determine leading zeros.\n        for(i = 0; i < nl && n.charAt(i) == \"0\";)++i;\n        if (i == nl) // Zero.\n        x.c = [\n            x.e = 0\n        ];\n        else {\n            // Determine trailing zeros.\n            for(; nl > 0 && n.charAt(--nl) == \"0\";);\n            x.e = e - i - 1;\n            x.c = [];\n            // Convert string to array of digits without leading/trailing zeros.\n            for(e = 0; i <= nl;)x.c[e++] = +n.charAt(i++);\n        }\n        return x;\n    }\n    /*\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\n   *\n   * x {Big} The Big to round.\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   * [more] {boolean} Whether the result of division was truncated.\n   */ function round(x, sd, rm, more) {\n        var xc = x.c;\n        if (rm === UNDEFINED) rm = x.constructor.RM;\n        if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) throw Error(INVALID_RM);\n        if (sd < 1) {\n            more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = x.e - sd + 1;\n                xc[0] = 1;\n            } else // Zero.\n            xc[0] = x.e = 0;\n        } else if (sd < xc.length) {\n            // xc[sd] is the digit after the digit that may be rounded up.\n            more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);\n            // Remove any digits after the required precision.\n            xc.length = sd;\n            // Round up?\n            if (more) // Rounding up may mean the previous digit has to be rounded up.\n            for(; ++xc[--sd] > 9;){\n                xc[sd] = 0;\n                if (sd === 0) {\n                    ++x.e;\n                    xc.unshift(1);\n                    break;\n                }\n            }\n            // Remove trailing zeros.\n            for(sd = xc.length; !xc[--sd];)xc.pop();\n        }\n        return x;\n    }\n    /*\n   * Return a string representing the value of Big x in normal or exponential notation.\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n   */ function stringify(x, doExponential, isNonzero) {\n        var e = x.e, s = x.c.join(\"\"), n = s.length;\n        // Exponential notation?\n        if (doExponential) s = s.charAt(0) + (n > 1 ? \".\" + s.slice(1) : \"\") + (e < 0 ? \"e\" : \"e+\") + e;\n        else if (e < 0) {\n            for(; ++e;)s = \"0\" + s;\n            s = \"0.\" + s;\n        } else if (e > 0) {\n            if (++e > n) for(e -= n; e--;)s += \"0\";\n            else if (e < n) s = s.slice(0, e) + \".\" + s.slice(e);\n        } else if (n > 1) s = s.charAt(0) + \".\" + s.slice(1);\n        return x.s < 0 && isNonzero ? \"-\" + s : s;\n    }\n    // Prototype/instance methods\n    /*\n   * Return a new Big whose value is the absolute value of this Big.\n   */ P.abs = function() {\n        var x = new this.constructor(this);\n        x.s = 1;\n        return x;\n    };\n    /*\n   * Return 1 if the value of this Big is greater than the value of Big y,\n   *       -1 if the value of this Big is less than the value of Big y, or\n   *        0 if they have the same value.\n   */ P.cmp = function(y) {\n        var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;\n        // Either zero?\n        if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\n        // Signs differ?\n        if (i != j) return i;\n        isneg = i < 0;\n        // Compare exponents.\n        if (k != l) return k > l ^ isneg ? 1 : -1;\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n        // Compare digit by digit.\n        for(i = -1; ++i < j;){\n            if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n        }\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n    };\n    /*\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */ P.div = function(y) {\n        var x = this, Big = x.constructor, a = x.c, b = (y = new Big(y)).c, k = x.s == y.s ? 1 : -1, dp = Big.DP;\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\n        // Divisor is zero?\n        if (!b[0]) throw Error(DIV_BY_ZERO);\n        // Dividend is 0? Return +-0.\n        if (!a[0]) {\n            y.s = k;\n            y.c = [\n                y.e = 0\n            ];\n            return y;\n        }\n        var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1; // precision of the result\n        q.s = k;\n        k = p < 0 ? 0 : p;\n        // Create version of divisor with leading zero.\n        bz.unshift(0);\n        // Add zeros to make remainder as long as divisor.\n        for(; rl++ < bl;)r.push(0);\n        do {\n            // n is how many times the divisor goes into current remainder.\n            for(n = 0; n < 10; n++){\n                // Compare divisor and remainder.\n                if (bl != (rl = r.length)) cmp = bl > rl ? 1 : -1;\n                else {\n                    for(ri = -1, cmp = 0; ++ri < bl;)if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n                // If divisor < remainder, subtract divisor from remainder.\n                if (cmp < 0) {\n                    // Remainder can't be more than 1 digit longer than divisor.\n                    // Equalise lengths using divisor with extra leading zero?\n                    for(bt = rl == bl ? b : bz; rl;){\n                        if (r[--rl] < bt[rl]) {\n                            ri = rl;\n                            for(; ri && !r[--ri];)r[ri] = 9;\n                            --r[ri];\n                            r[rl] += 10;\n                        }\n                        r[rl] -= bt[rl];\n                    }\n                    for(; !r[0];)r.shift();\n                } else break;\n            }\n            // Add the digit n to the result array.\n            qc[qi++] = cmp ? n : ++n;\n            // Update the remainder.\n            if (r[0] && cmp) r[rl] = a[ai] || 0;\n            else r = [\n                a[ai]\n            ];\n        }while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n        // Leading zero? Do not remove if result is simply zero (qi == 1).\n        if (!qc[0] && qi != 1) {\n            // There can't be more than one zero.\n            qc.shift();\n            q.e--;\n            p--;\n        }\n        // Round?\n        if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\n        return q;\n    };\n    /*\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n   */ P.eq = function(y) {\n        return this.cmp(y) === 0;\n    };\n    /*\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\n   * false.\n   */ P.gt = function(y) {\n        return this.cmp(y) > 0;\n    };\n    /*\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n   * return false.\n   */ P.gte = function(y) {\n        return this.cmp(y) > -1;\n    };\n    /*\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n   */ P.lt = function(y) {\n        return this.cmp(y) < 0;\n    };\n    /*\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n   * return false.\n   */ P.lte = function(y) {\n        return this.cmp(y) < 1;\n    };\n    /*\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\n   */ P.minus = P.sub = function(y) {\n        var i, j, t, xlty, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n        // Signs differ?\n        if (a != b) {\n            y.s = -b;\n            return x.plus(y);\n        }\n        var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n            if (yc[0]) y.s = -b;\n            else if (xc[0]) y = new Big(x);\n            else y.s = 1;\n            return y;\n        }\n        // Determine which is the bigger number. Prepend zeros to equalise exponents.\n        if (a = xe - ye) {\n            if (xlty = a < 0) {\n                a = -a;\n                t = xc;\n            } else {\n                ye = xe;\n                t = yc;\n            }\n            t.reverse();\n            for(b = a; b--;)t.push(0);\n            t.reverse();\n        } else {\n            // Exponents equal. Check digit by digit.\n            j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n            for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n        // x < y? Point xc to the array of the bigger number.\n        if (xlty) {\n            t = xc;\n            xc = yc;\n            yc = t;\n            y.s = -y.s;\n        }\n        /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */ if ((b = (j = yc.length) - (i = xc.length)) > 0) for(; b--;)xc[i++] = 0;\n        // Subtract yc from xc.\n        for(b = i; j > a;){\n            if (xc[--j] < yc[j]) {\n                for(i = j; i && !xc[--i];)xc[i] = 9;\n                --xc[i];\n                xc[j] += 10;\n            }\n            xc[j] -= yc[j];\n        }\n        // Remove trailing zeros.\n        for(; xc[--b] === 0;)xc.pop();\n        // Remove leading zeros and adjust exponent accordingly.\n        for(; xc[0] === 0;){\n            xc.shift();\n            --ye;\n        }\n        if (!xc[0]) {\n            // n - n = +0\n            y.s = 1;\n            // Result must be zero.\n            xc = [\n                ye = 0\n            ];\n        }\n        y.c = xc;\n        y.e = ye;\n        return y;\n    };\n    /*\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\n   */ P.mod = function(y) {\n        var ygtx, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n        if (!y.c[0]) throw Error(DIV_BY_ZERO);\n        x.s = y.s = 1;\n        ygtx = y.cmp(x) == 1;\n        x.s = a;\n        y.s = b;\n        if (ygtx) return new Big(x);\n        a = Big.DP;\n        b = Big.RM;\n        Big.DP = Big.RM = 0;\n        x = x.div(y);\n        Big.DP = a;\n        Big.RM = b;\n        return this.minus(x.times(y));\n    };\n    /*\n   * Return a new Big whose value is the value of this Big negated.\n   */ P.neg = function() {\n        var x = new this.constructor(this);\n        x.s = -x.s;\n        return x;\n    };\n    /*\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\n   */ P.plus = P.add = function(y) {\n        var e, k, t, x = this, Big = x.constructor;\n        y = new Big(y);\n        // Signs differ?\n        if (x.s != y.s) {\n            y.s = -y.s;\n            return x.minus(y);\n        }\n        var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n        // Either zero?\n        if (!xc[0] || !yc[0]) {\n            if (!yc[0]) {\n                if (xc[0]) y = new Big(x);\n                else y.s = x.s;\n            }\n            return y;\n        }\n        xc = xc.slice();\n        // Prepend zeros to equalise exponents.\n        // Note: reverse faster than unshifts.\n        if (e = xe - ye) {\n            if (e > 0) {\n                ye = xe;\n                t = yc;\n            } else {\n                e = -e;\n                t = xc;\n            }\n            t.reverse();\n            for(; e--;)t.push(0);\n            t.reverse();\n        }\n        // Point xc to the longer array.\n        if (xc.length - yc.length < 0) {\n            t = yc;\n            yc = xc;\n            xc = t;\n        }\n        e = yc.length;\n        // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n        for(k = 0; e; xc[e] %= 10)k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n        if (k) {\n            xc.unshift(k);\n            ++ye;\n        }\n        // Remove trailing zeros.\n        for(e = xc.length; xc[--e] === 0;)xc.pop();\n        y.c = xc;\n        y.e = ye;\n        return y;\n    };\n    /*\n   * Return a Big whose value is the value of this Big raised to the power n.\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\n   * mode Big.RM.\n   *\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n   */ P.pow = function(n) {\n        var x = this, one = new x.constructor(\"1\"), y = one, isneg = n < 0;\n        if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + \"exponent\");\n        if (isneg) n = -n;\n        for(;;){\n            if (n & 1) y = y.times(x);\n            n >>= 1;\n            if (!n) break;\n            x = x.times(x);\n        }\n        return isneg ? one.div(y) : y;\n    };\n    /*\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n   *\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */ P.prec = function(sd, rm) {\n        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) throw Error(INVALID + \"precision\");\n        return round(new this.constructor(this), sd, rm);\n    };\n    /*\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n   * using rounding mode rm, or Big.RM if rm is not specified.\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\n   * If dp is not specified, round to 0 decimal places.\n   *\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */ P.round = function(dp, rm) {\n        if (dp === UNDEFINED) dp = 0;\n        else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\n        return round(new this.constructor(this), dp + this.e + 1, rm);\n    };\n    /*\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */ P.sqrt = function() {\n        var r, c, t, x = this, Big = x.constructor, s = x.s, e = x.e, half = new Big(\"0.5\");\n        // Zero?\n        if (!x.c[0]) return new Big(x);\n        // Negative?\n        if (s < 0) throw Error(NAME + \"No square root\");\n        // Estimate.\n        s = Math.sqrt(x + \"\");\n        // Math.sqrt underflow/overflow?\n        // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n        if (s === 0 || s === 1 / 0) {\n            c = x.c.join(\"\");\n            if (!(c.length + e & 1)) c += \"0\";\n            s = Math.sqrt(c);\n            e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n            r = new Big((s == 1 / 0 ? \"5e\" : (s = s.toExponential()).slice(0, s.indexOf(\"e\") + 1)) + e);\n        } else r = new Big(s + \"\");\n        e = r.e + (Big.DP += 4);\n        // Newton-Raphson iteration.\n        do {\n            t = r;\n            r = half.times(t.plus(x.div(t)));\n        }while (t.c.slice(0, e).join(\"\") !== r.c.slice(0, e).join(\"\"));\n        return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n    };\n    /*\n   * Return a new Big whose value is the value of this Big times the value of Big y.\n   */ P.times = P.mul = function(y) {\n        var c, x = this, Big = x.constructor, xc = x.c, yc = (y = new Big(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n        // Determine sign of result.\n        y.s = x.s == y.s ? 1 : -1;\n        // Return signed 0 if either 0.\n        if (!xc[0] || !yc[0]) {\n            y.c = [\n                y.e = 0\n            ];\n            return y;\n        }\n        // Initialise exponent of result as x.e + y.e.\n        y.e = i + j;\n        // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n        if (a < b) {\n            c = xc;\n            xc = yc;\n            yc = c;\n            j = a;\n            a = b;\n            b = j;\n        }\n        // Initialise coefficient array of result with zeros.\n        for(c = new Array(j = a + b); j--;)c[j] = 0;\n        // Multiply.\n        // i is initially xc.length.\n        for(i = b; i--;){\n            b = 0;\n            // a is yc.length.\n            for(j = a + i; j > i;){\n                // Current sum of products at this digit position, plus carry.\n                b = c[j] + yc[i] * xc[j - i - 1] + b;\n                c[j--] = b % 10;\n                // carry\n                b = b / 10 | 0;\n            }\n            c[j] = b;\n        }\n        // Increment result exponent if there is a final carry, otherwise remove leading zero.\n        if (b) ++y.e;\n        else c.shift();\n        // Remove trailing zeros.\n        for(i = c.length; !c[--i];)c.pop();\n        y.c = c;\n        return y;\n    };\n    /*\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n   *\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */ P.toExponential = function(dp, rm) {\n        var x = this, n = x.c[0];\n        if (dp !== UNDEFINED) {\n            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\n            x = round(new x.constructor(x), ++dp, rm);\n            for(; x.c.length < dp;)x.c.push(0);\n        }\n        return stringify(x, true, !!n);\n    };\n    /*\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n   *\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   *\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n   */ P.toFixed = function(dp, rm) {\n        var x = this, n = x.c[0];\n        if (dp !== UNDEFINED) {\n            if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\n            x = round(new x.constructor(x), dp + x.e + 1, rm);\n            // x.e may have changed if the value is rounded up.\n            for(dp = dp + x.e + 1; x.c.length < dp;)x.c.push(0);\n        }\n        return stringify(x, false, !!n);\n    };\n    /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Omit the sign for negative zero.\n   */ P.toJSON = P.toString = function() {\n        var x = this, Big = x.constructor;\n        return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n    };\n    /*\n   * Return the value of this Big as a primitve number.\n   */ P.toNumber = function() {\n        var n = Number(stringify(this, true, true));\n        if (this.constructor.strict === true && !this.eq(n.toString())) throw Error(NAME + \"Imprecise conversion\");\n        return n;\n    };\n    /*\n   * Return a string representing the value of this Big rounded to sd significant digits using\n   * rounding mode rm, or Big.RM if rm is not specified.\n   * Use exponential notation if sd is less than the number of digits necessary to represent\n   * the integer part of the value in normal notation.\n   *\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */ P.toPrecision = function(sd, rm) {\n        var x = this, Big = x.constructor, n = x.c[0];\n        if (sd !== UNDEFINED) {\n            if (sd !== ~~sd || sd < 1 || sd > MAX_DP) throw Error(INVALID + \"precision\");\n            x = round(new Big(x), sd, rm);\n            for(; x.c.length < sd;)x.c.push(0);\n        }\n        return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n    };\n    /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Include the sign for negative zero.\n   */ P.valueOf = function() {\n        var x = this, Big = x.constructor;\n        if (Big.strict === true) throw Error(NAME + \"valueOf disallowed\");\n        return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n    };\n    // Export\n    Big = _Big_();\n    Big[\"default\"] = Big.Big = Big;\n    //AMD.\n    if (typeof define === \"function\" && define.amd) define(function() {\n        return Big;\n    });\n    else if (typeof module !== \"undefined\" && module.exports) module.exports = Big;\n    else GLOBAL.Big = Big;\n})(this);\n\n//# sourceMappingURL=login.01047d43.js.map\n","/*\n *  big.js v6.2.1\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2022 Michael Mclaughlin\n *  https://github.com/MikeMcl/big.js/LICENCE.md\n */\n;(function (GLOBAL) {\n  'use strict';\n  var Big,\n\n\n/************************************** EDITABLE DEFAULTS *****************************************/\n\n\n    // The default values below must be integers within the stated ranges.\n\n    /*\n     * The maximum number of decimal places (DP) of the results of operations involving division:\n     * div and sqrt, and pow with negative exponents.\n     */\n    DP = 20,            // 0 to MAX_DP\n\n    /*\n     * The rounding mode (RM) used when rounding to the above decimal places.\n     *\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n     *  3  Away from zero.                                  (ROUND_UP)\n     */\n    RM = 1,             // 0, 1, 2 or 3\n\n    // The maximum value of DP and Big.DP.\n    MAX_DP = 1E6,       // 0 to 1000000\n\n    // The maximum magnitude of the exponent argument to the pow method.\n    MAX_POWER = 1E6,    // 1 to 1000000\n\n    /*\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\n     * (JavaScript numbers: -7)\n     * -1000000 is the minimum recommended exponent value of a Big.\n     */\n    NE = -7,            // 0 to -1000000\n\n    /*\n     * The positive exponent (PE) at and above which toString returns exponential notation.\n     * (JavaScript numbers: 21)\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\n     */\n    PE = 21,            // 0 to 1000000\n\n    /*\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\n     * primitive number without a loss of precision.\n     */\n    STRICT = false,     // true or false\n\n\n/**************************************************************************************************/\n\n\n    // Error messages.\n    NAME = '[big.js] ',\n    INVALID = NAME + 'Invalid ',\n    INVALID_DP = INVALID + 'decimal places',\n    INVALID_RM = INVALID + 'rounding mode',\n    DIV_BY_ZERO = NAME + 'Division by zero',\n\n    // The shared prototype object.\n    P = {},\n    UNDEFINED = void 0,\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n\n\n  /*\n   * Create and return a Big constructor.\n   */\n  function _Big_() {\n\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n      var x = this;\n\n      // Enable constructor usage without new.\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\n\n      // Duplicate.\n      if (n instanceof Big) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = n.c.slice();\n      } else {\n        if (typeof n !== 'string') {\n          if (Big.strict === true && typeof n !== 'bigint') {\n            throw TypeError(INVALID + 'value');\n          }\n\n          // Minus zero?\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\n        }\n\n        parse(x, n);\n      }\n\n      // Retain a reference to this Big constructor.\n      // Shadow Big.prototype.constructor which points to Object.\n      x.constructor = Big;\n    }\n\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.strict = STRICT;\n    Big.roundDown = 0;\n    Big.roundHalfUp = 1;\n    Big.roundHalfEven = 2;\n    Big.roundUp = 3;\n\n    return Big;\n  }\n\n\n  /*\n   * Parse the number or string value passed to a Big constructor.\n   *\n   * x {Big} A Big number instance.\n   * n {number|string} A numeric value.\n   */\n  function parse(x, n) {\n    var e, i, nl;\n\n    if (!NUMERIC.test(n)) {\n      throw Error(INVALID + 'number');\n    }\n\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\n\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n\n      // Determine exponent.\n      if (e < 0) e = i;\n      e += +n.slice(i + 1);\n      n = n.substring(0, i);\n    } else if (e < 0) {\n\n      // Integer.\n      e = n.length;\n    }\n\n    nl = n.length;\n\n    // Determine leading zeros.\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n\n    if (i == nl) {\n\n      // Zero.\n      x.c = [x.e = 0];\n    } else {\n\n      // Determine trailing zeros.\n      for (; nl > 0 && n.charAt(--nl) == '0';);\n      x.e = e - i - 1;\n      x.c = [];\n\n      // Convert string to array of digits without leading/trailing zeros.\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\n   *\n   * x {Big} The Big to round.\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   * [more] {boolean} Whether the result of division was truncated.\n   */\n  function round(x, sd, rm, more) {\n    var xc = x.c;\n\n    if (rm === UNDEFINED) rm = x.constructor.RM;\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\n      throw Error(INVALID_RM);\n    }\n\n    if (sd < 1) {\n      more =\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\n        rm === 1 && xc[0] >= 5 ||\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\n      );\n\n      xc.length = 1;\n\n      if (more) {\n\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n        x.e = x.e - sd + 1;\n        xc[0] = 1;\n      } else {\n\n        // Zero.\n        xc[0] = x.e = 0;\n      }\n    } else if (sd < xc.length) {\n\n      // xc[sd] is the digit after the digit that may be rounded up.\n      more =\n        rm === 1 && xc[sd] >= 5 ||\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\n        rm === 3 && (more || !!xc[0]);\n\n      // Remove any digits after the required precision.\n      xc.length = sd;\n\n      // Round up?\n      if (more) {\n\n        // Rounding up may mean the previous digit has to be rounded up.\n        for (; ++xc[--sd] > 9;) {\n          xc[sd] = 0;\n          if (sd === 0) {\n            ++x.e;\n            xc.unshift(1);\n            break;\n          }\n        }\n      }\n\n      // Remove trailing zeros.\n      for (sd = xc.length; !xc[--sd];) xc.pop();\n    }\n\n    return x;\n  }\n\n\n  /*\n   * Return a string representing the value of Big x in normal or exponential notation.\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n   */\n  function stringify(x, doExponential, isNonzero) {\n    var e = x.e,\n      s = x.c.join(''),\n      n = s.length;\n\n    // Exponential notation?\n    if (doExponential) {\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n\n    // Normal notation.\n    } else if (e < 0) {\n      for (; ++e;) s = '0' + s;\n      s = '0.' + s;\n    } else if (e > 0) {\n      if (++e > n) {\n        for (e -= n; e--;) s += '0';\n      } else if (e < n) {\n        s = s.slice(0, e) + '.' + s.slice(e);\n      }\n    } else if (n > 1) {\n      s = s.charAt(0) + '.' + s.slice(1);\n    }\n\n    return x.s < 0 && isNonzero ? '-' + s : s;\n  }\n\n\n  // Prototype/instance methods\n\n\n  /*\n   * Return a new Big whose value is the absolute value of this Big.\n   */\n  P.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n  };\n\n\n  /*\n   * Return 1 if the value of this Big is greater than the value of Big y,\n   *       -1 if the value of this Big is less than the value of Big y, or\n   *        0 if they have the same value.\n   */\n  P.cmp = function (y) {\n    var isneg,\n      x = this,\n      xc = x.c,\n      yc = (y = new x.constructor(y)).c,\n      i = x.s,\n      j = y.s,\n      k = x.e,\n      l = y.e;\n\n    // Either zero?\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\n\n    // Signs differ?\n    if (i != j) return i;\n\n    isneg = i < 0;\n\n    // Compare exponents.\n    if (k != l) return k > l ^ isneg ? 1 : -1;\n\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n\n    // Compare digit by digit.\n    for (i = -1; ++i < j;) {\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    }\n\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */\n  P.div = function (y) {\n    var x = this,\n      Big = x.constructor,\n      a = x.c,                  // dividend\n      b = (y = new Big(y)).c,   // divisor\n      k = x.s == y.s ? 1 : -1,\n      dp = Big.DP;\n\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n      throw Error(INVALID_DP);\n    }\n\n    // Divisor is zero?\n    if (!b[0]) {\n      throw Error(DIV_BY_ZERO);\n    }\n\n    // Dividend is 0? Return +-0.\n    if (!a[0]) {\n      y.s = k;\n      y.c = [y.e = 0];\n      return y;\n    }\n\n    var bl, bt, n, cmp, ri,\n      bz = b.slice(),\n      ai = bl = b.length,\n      al = a.length,\n      r = a.slice(0, bl),   // remainder\n      rl = r.length,\n      q = y,                // quotient\n      qc = q.c = [],\n      qi = 0,\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\n\n    q.s = k;\n    k = p < 0 ? 0 : p;\n\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;) r.push(0);\n\n    do {\n\n      // n is how many times the divisor goes into current remainder.\n      for (n = 0; n < 10; n++) {\n\n        // Compare divisor and remainder.\n        if (bl != (rl = r.length)) {\n          cmp = bl > rl ? 1 : -1;\n        } else {\n          for (ri = -1, cmp = 0; ++ri < bl;) {\n            if (b[ri] != r[ri]) {\n              cmp = b[ri] > r[ri] ? 1 : -1;\n              break;\n            }\n          }\n        }\n\n        // If divisor < remainder, subtract divisor from remainder.\n        if (cmp < 0) {\n\n          // Remainder can't be more than 1 digit longer than divisor.\n          // Equalise lengths using divisor with extra leading zero?\n          for (bt = rl == bl ? b : bz; rl;) {\n            if (r[--rl] < bt[rl]) {\n              ri = rl;\n              for (; ri && !r[--ri];) r[ri] = 9;\n              --r[ri];\n              r[rl] += 10;\n            }\n            r[rl] -= bt[rl];\n          }\n\n          for (; !r[0];) r.shift();\n        } else {\n          break;\n        }\n      }\n\n      // Add the digit n to the result array.\n      qc[qi++] = cmp ? n : ++n;\n\n      // Update the remainder.\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\n      else r = [a[ai]];\n\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n\n      // There can't be more than one zero.\n      qc.shift();\n      q.e--;\n      p--;\n    }\n\n    // Round?\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\n\n    return q;\n  };\n\n\n  /*\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n   */\n  P.eq = function (y) {\n    return this.cmp(y) === 0;\n  };\n\n\n  /*\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\n   * false.\n   */\n  P.gt = function (y) {\n    return this.cmp(y) > 0;\n  };\n\n\n  /*\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n   * return false.\n   */\n  P.gte = function (y) {\n    return this.cmp(y) > -1;\n  };\n\n\n  /*\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n   */\n  P.lt = function (y) {\n    return this.cmp(y) < 0;\n  };\n\n\n  /*\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n   * return false.\n   */\n  P.lte = function (y) {\n    return this.cmp(y) < 1;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\n   */\n  P.minus = P.sub = function (y) {\n    var i, j, t, xlty,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s;\n\n    // Signs differ?\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n\n    var xc = x.c.slice(),\n      xe = x.e,\n      yc = y.c,\n      ye = y.e;\n\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n      if (yc[0]) {\n        y.s = -b;\n      } else if (xc[0]) {\n        y = new Big(x);\n      } else {\n        y.s = 1;\n      }\n      return y;\n    }\n\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n\n      if (xlty = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n\n      t.reverse();\n      for (b = a; b--;) t.push(0);\n      t.reverse();\n    } else {\n\n      // Exponents equal. Check digit by digit.\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xlty = xc[b] < yc[b];\n          break;\n        }\n      }\n    }\n\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n      t = xc;\n      xc = yc;\n      yc = t;\n      y.s = -y.s;\n    }\n\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\n\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i];) xc[i] = 9;\n        --xc[i];\n        xc[j] += 10;\n      }\n\n      xc[j] -= yc[j];\n    }\n\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;) xc.pop();\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n      xc.shift();\n      --ye;\n    }\n\n    if (!xc[0]) {\n\n      // n - n = +0\n      y.s = 1;\n\n      // Result must be zero.\n      xc = [ye = 0];\n    }\n\n    y.c = xc;\n    y.e = ye;\n\n    return y;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\n   */\n  P.mod = function (y) {\n    var ygtx,\n      x = this,\n      Big = x.constructor,\n      a = x.s,\n      b = (y = new Big(y)).s;\n\n    if (!y.c[0]) {\n      throw Error(DIV_BY_ZERO);\n    }\n\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n\n    if (ygtx) return new Big(x);\n\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n\n    return this.minus(x.times(y));\n  };\n  \n  \n  /*\n   * Return a new Big whose value is the value of this Big negated.\n   */\n  P.neg = function () {\n    var x = new this.constructor(this);\n    x.s = -x.s;\n    return x;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\n   */\n  P.plus = P.add = function (y) {\n    var e, k, t,\n      x = this,\n      Big = x.constructor;\n\n    y = new Big(y);\n\n    // Signs differ?\n    if (x.s != y.s) {\n      y.s = -y.s;\n      return x.minus(y);\n    }\n\n    var xe = x.e,\n      xc = x.c,\n      ye = y.e,\n      yc = y.c;\n\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n      if (!yc[0]) {\n        if (xc[0]) {\n          y = new Big(x);\n        } else {\n          y.s = x.s;\n        }\n      }\n      return y;\n    }\n\n    xc = xc.slice();\n\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (e = xe - ye) {\n      if (e > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        e = -e;\n        t = xc;\n      }\n\n      t.reverse();\n      for (; e--;) t.push(0);\n      t.reverse();\n    }\n\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n      t = yc;\n      yc = xc;\n      xc = t;\n    }\n\n    e = yc.length;\n\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\n\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n    if (k) {\n      xc.unshift(k);\n      ++ye;\n    }\n\n    // Remove trailing zeros.\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\n\n    y.c = xc;\n    y.e = ye;\n\n    return y;\n  };\n\n\n  /*\n   * Return a Big whose value is the value of this Big raised to the power n.\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\n   * mode Big.RM.\n   *\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n   */\n  P.pow = function (n) {\n    var x = this,\n      one = new x.constructor('1'),\n      y = one,\n      isneg = n < 0;\n\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\n      throw Error(INVALID + 'exponent');\n    }\n\n    if (isneg) n = -n;\n\n    for (;;) {\n      if (n & 1) y = y.times(x);\n      n >>= 1;\n      if (!n) break;\n      x = x.times(x);\n    }\n\n    return isneg ? one.div(y) : y;\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\n   *\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */\n  P.prec = function (sd, rm) {\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n      throw Error(INVALID + 'precision');\n    }\n    return round(new this.constructor(this), sd, rm);\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\n   * using rounding mode rm, or Big.RM if rm is not specified.\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\n   * If dp is not specified, round to 0 decimal places.\n   *\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */\n  P.round = function (dp, rm) {\n    if (dp === UNDEFINED) dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\n      throw Error(INVALID_DP);\n    }\n    return round(new this.constructor(this), dp + this.e + 1, rm);\n  };\n\n\n  /*\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n   */\n  P.sqrt = function () {\n    var r, c, t,\n      x = this,\n      Big = x.constructor,\n      s = x.s,\n      e = x.e,\n      half = new Big('0.5');\n\n    // Zero?\n    if (!x.c[0]) return new Big(x);\n\n    // Negative?\n    if (s < 0) {\n      throw Error(NAME + 'No square root');\n    }\n\n    // Estimate.\n    s = Math.sqrt(x + '');\n\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n      c = x.c.join('');\n      if (!(c.length + e & 1)) c += '0';\n      s = Math.sqrt(c);\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    } else {\n      r = new Big(s + '');\n    }\n\n    e = r.e + (Big.DP += 4);\n\n    // Newton-Raphson iteration.\n    do {\n      t = r;\n      r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\n  };\n\n\n  /*\n   * Return a new Big whose value is the value of this Big times the value of Big y.\n   */\n  P.times = P.mul = function (y) {\n    var c,\n      x = this,\n      Big = x.constructor,\n      xc = x.c,\n      yc = (y = new Big(y)).c,\n      a = xc.length,\n      b = yc.length,\n      i = x.e,\n      j = y.e;\n\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) {\n      y.c = [y.e = 0];\n      return y;\n    }\n\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n      c = xc;\n      xc = yc;\n      yc = c;\n      j = a;\n      a = b;\n      b = j;\n    }\n\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\n\n    // Multiply.\n\n    // i is initially xc.length.\n    for (i = b; i--;) {\n      b = 0;\n\n      // a is yc.length.\n      for (j = a + i; j > i;) {\n\n        // Current sum of products at this digit position, plus carry.\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\n        c[j--] = b % 10;\n\n        // carry\n        b = b / 10 | 0;\n      }\n\n      c[j] = b;\n    }\n\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b) ++y.e;\n    else c.shift();\n\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];) c.pop();\n    y.c = c;\n\n    return y;\n  };\n\n\n  /*\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n   *\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */\n  P.toExponential = function (dp, rm) {\n    var x = this,\n      n = x.c[0];\n\n    if (dp !== UNDEFINED) {\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n      }\n      x = round(new x.constructor(x), ++dp, rm);\n      for (; x.c.length < dp;) x.c.push(0);\n    }\n\n    return stringify(x, true, !!n);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\n   *\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   *\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n   */\n  P.toFixed = function (dp, rm) {\n    var x = this,\n      n = x.c[0];\n\n    if (dp !== UNDEFINED) {\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\n        throw Error(INVALID_DP);\n      }\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\n\n      // x.e may have changed if the value is rounded up.\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\n    }\n\n    return stringify(x, false, !!n);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Omit the sign for negative zero.\n   */\n  P.toJSON = P.toString = function () {\n    var x = this,\n      Big = x.constructor;\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\n  };\n\n\n  /*\n   * Return the value of this Big as a primitve number.\n   */\n  P.toNumber = function () {\n    var n = Number(stringify(this, true, true));\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\n      throw Error(NAME + 'Imprecise conversion');\n    }\n    return n;\n  };\n\n\n  /*\n   * Return a string representing the value of this Big rounded to sd significant digits using\n   * rounding mode rm, or Big.RM if rm is not specified.\n   * Use exponential notation if sd is less than the number of digits necessary to represent\n   * the integer part of the value in normal notation.\n   *\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\n   */\n  P.toPrecision = function (sd, rm) {\n    var x = this,\n      Big = x.constructor,\n      n = x.c[0];\n\n    if (sd !== UNDEFINED) {\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\n        throw Error(INVALID + 'precision');\n      }\n      x = round(new Big(x), sd, rm);\n      for (; x.c.length < sd;) x.c.push(0);\n    }\n\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\n  };\n\n\n  /*\n   * Return a string representing the value of this Big.\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\n   * Include the sign for negative zero.\n   */\n  P.valueOf = function () {\n    var x = this,\n      Big = x.constructor;\n    if (Big.strict === true) {\n      throw Error(NAME + 'valueOf disallowed');\n    }\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\n  };\n\n\n  // Export\n\n\n  Big = _Big_();\n\n  Big['default'] = Big.Big = Big;\n\n  //AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(function () { return Big; });\n\n  // Node and other CommonJS-like environments that support module.exports.\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = Big;\n\n  //Browser.\n  } else {\n    GLOBAL.Big = Big;\n  }\n})(this);\n"],"names":["GLOBAL","Big","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","NUMERIC","round","x","sd","rm","more","xc","c","constructor","RM","Error","length","e","unshift","pop","stringify","doExponential","isNonzero","s","join","n","charAt","slice","abs","cmp","y","isneg","yc","i","j","k","l","div","a","b","dp","DP","bl","bt","ri","bz","ai","al","r","rl","q","qc","qi","p","push","shift","eq","gt","gte","lt","lte","minus","sub","t","xlty","plus","xe","ye","reverse","mod","ygtx","times","neg","add","pow","one","prec","sqrt","half","Math","toExponential","indexOf","mul","Array","toFixed","toJSON","toString","NE","PE","toNumber","Number","strict","toPrecision","valueOf","_Big_","TypeError","String","parse","nl","test","replace","search","substring","prototype","roundDown","roundHalfUp","roundHalfEven","roundUp","define","amd","module","exports"],"version":3,"file":"login.01047d43.js.map"}