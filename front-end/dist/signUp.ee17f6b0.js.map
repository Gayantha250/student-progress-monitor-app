{"mappings":"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","sources":["node_modules/big.js/big.js"],"sourcesContent":["/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n  \r\n  \r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n"],"names":[],"version":3,"file":"signUp.ee17f6b0.js.map","sourceRoot":"/__parcel_source_root/"}